{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UniversityserviceService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.isUserLogin = new BehaviorSubject(true);\n    this.showSideMenu = new BehaviorSubject(false);\n    this.baseurl = 'http://localhost:8080/university/';\n  }\n  // create university\n  addUniversity(university) {\n    return this.httpClient.post(`${this.baseurl}` + 'create', university);\n  }\n  // create course to particular university\n  addCourse(instituteCode, course) {\n    return this.httpClient.post(`${this.baseurl}` + 'add/course/' + `${instituteCode}`, course);\n  }\n  // read enrolled lists\n  getEnrolledList(instituteCode) {\n    return this.httpClient.get(`${this.baseurl}` + 'read/enrolledlist/' + `${instituteCode}`);\n  }\n  // read course count\n  getCourseCount(instituteCode) {\n    return this.httpClient.get(`${this.baseurl}` + 'coursecount/' + `${instituteCode}`);\n  }\n  // read student count\n  getStudentCount(instituteCode) {\n    return this.httpClient.get(`${this.baseurl}` + 'studentcount/' + `${instituteCode}`);\n  }\n  setUserType(isUser) {\n    this.isUserLogin.next(isUser);\n  }\n  setSideMenuView(view) {\n    this.showSideMenu.next(view);\n  }\n  setEmailId(emailId) {\n    this.emailId = emailId;\n  }\n  getUserByEmail(emailId) {\n    return this.httpClient.get(`${this.baseurl}` + 'universitylogin/' + `${emailId}`);\n  }\n  getUniversityById(instituteCode) {\n    return this.httpClient.get(`${this.baseurl}` + 'universityprofile/' + `${instituteCode}`);\n  }\n}\nUniversityserviceService.ɵfac = function UniversityserviceService_Factory(t) {\n  return new (t || UniversityserviceService)(i0.ɵɵinject(i1.HttpClient));\n};\nUniversityserviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UniversityserviceService,\n  factory: UniversityserviceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;;;AAQlD,OAAM,MAAOC,wBAAwB;EAQnCC,YAAoBC,UAAuB;IAAvB,eAAU,GAAVA,UAAU;IAN9B,gBAAW,GAAG,IAAIH,eAAe,CAAU,IAAI,CAAC;IAChD,iBAAY,GAAG,IAAIA,eAAe,CAAU,KAAK,CAAC;IAE1C,YAAO,GAAG,mCAAmC;EAGN;EAE/C;EACAI,aAAa,CAACC,UAAqB;IACjC,OAAO,IAAI,CAACF,UAAU,CAACG,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,EAAE,GAAG,QAAQ,EAACF,UAAU,CAAC;EACtE;EAEA;EACAG,SAAS,CAACC,aAAoB,EAAEC,MAAa;IAC3C,OAAO,IAAI,CAACP,UAAU,CAACG,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,EAAE,GAAC,aAAa,GAAC,GAAGE,aAAa,EAAE,EAACC,MAAM,CAAC;EACxF;EAEA;EACAC,eAAe,CAACF,aAAoB;IAClC,OAAO,IAAI,CAACN,UAAU,CAACS,GAAG,CAAY,GAAG,IAAI,CAACL,OAAO,EAAE,GAAC,oBAAoB,GAAC,GAAGE,aAAa,EAAE,CAAC;EAClG;EAGA;EACAI,cAAc,CAACJ,aAAoB;IACjC,OAAO,IAAI,CAACN,UAAU,CAACS,GAAG,CAAS,GAAG,IAAI,CAACL,OAAO,EAAE,GAAC,cAAc,GAAC,GAAGE,aAAa,EAAE,CAAC;EACzF;EAEC;EACAK,eAAe,CAACL,aAAoB;IACnC,OAAO,IAAI,CAACN,UAAU,CAACS,GAAG,CAAS,GAAG,IAAI,CAACL,OAAO,EAAE,GAAC,eAAe,GAAC,GAAGE,aAAa,EAAE,CAAC;EAC1F;EAMOM,WAAW,CAACC,MAAe;IAChC,IAAI,CAACC,WAAW,CAACC,IAAI,CAACF,MAAM,CAAC;EAC/B;EAEOG,eAAe,CAACC,IAAa;IAClC,IAAI,CAACC,YAAY,CAACH,IAAI,CAACE,IAAI,CAAC;EAC9B;EAGDE,UAAU,CAACC,OAAe;IACzB,IAAI,CAACA,OAAO,GAACA,OAAO;EACrB;EACCC,cAAc,CAACD,OAAe;IAC5B,OAAO,IAAI,CAACpB,UAAU,CAACS,GAAG,CAAa,GAAG,IAAI,CAACL,OAAO,EAAE,GAAC,kBAAkB,GAAC,GAAGgB,OAAO,EAAE,CAAC;EAC3F;EAEAE,iBAAiB,CAAChB,aAAqB;IACrC,OAAO,IAAI,CAACN,UAAU,CAACS,GAAG,CAAa,GAAG,IAAI,CAACL,OAAO,EAAE,GAAC,oBAAoB,GAAC,GAAGE,aAAa,EAAE,CAAC;EACnG;;AA1DWR,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;SAAxBA,wBAAwB;EAAAyB,SAAxBzB,wBAAwB;EAAA0B,YAFvB;AAAM","names":["BehaviorSubject","UniversityserviceService","constructor","httpClient","addUniversity","university","post","baseurl","addCourse","instituteCode","course","getEnrolledList","get","getCourseCount","getStudentCount","setUserType","isUser","isUserLogin","next","setSideMenuView","view","showSideMenu","setEmailId","emailId","getUserByEmail","getUniversityById","factory","providedIn"],"sourceRoot":"","sources":["D:\\MadeshV-1626\\Angular workspace\\studyabroad\\src\\app\\service\\universityservice.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Course } from '../Course';\r\nimport { Student } from '../Student';\r\nimport { University } from '../University';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UniversityserviceService {\r\n  emailId!:any;\r\n  isUserLogin = new BehaviorSubject<boolean>(true);\r\n  showSideMenu = new BehaviorSubject<boolean>(false);\r\n\r\n  private baseurl = 'http://localhost:8080/university/';\r\n\r\n\r\n  constructor(private httpClient : HttpClient) { }\r\n\r\n  // create university\r\n  addUniversity(university:University):Observable<Object>{\r\n    return this.httpClient.post(`${this.baseurl}` + 'create',university);\r\n  }\r\n\r\n  // create course to particular university\r\n  addCourse(instituteCode:Number ,course:Course):Observable<Object>{\r\n    return this.httpClient.post(`${this.baseurl}`+'add/course/'+`${instituteCode}`,course);\r\n  }\r\n\r\n  // read enrolled lists\r\n  getEnrolledList(instituteCode:number):Observable<Student[]>{\r\n    return this.httpClient.get<Student[]>(`${this.baseurl}`+'read/enrolledlist/'+`${instituteCode}`);\r\n  } \r\n\r\n  \r\n  // read course count\r\n  getCourseCount(instituteCode:number):Observable<Number>{\r\n    return this.httpClient.get<Number>(`${this.baseurl}`+'coursecount/'+`${instituteCode}`);\r\n  } \r\n\r\n   // read student count\r\n   getStudentCount(instituteCode:number):Observable<Number>{\r\n    return this.httpClient.get<Number>(`${this.baseurl}`+'studentcount/'+`${instituteCode}`);\r\n  } \r\n\r\n\r\n\r\n\r\n\r\n  public setUserType(isUser: boolean) {\r\n    this.isUserLogin.next(isUser);\r\n  }\r\n\r\n  public setSideMenuView(view: boolean) {\r\n    this.showSideMenu.next(view);\r\n  }\r\n\r\n\r\n setEmailId(emailId: string){\r\n  this.emailId=emailId;\r\n }\r\n  getUserByEmail(emailId: string): Observable<University>{\r\n    return this.httpClient.get<University>(`${this.baseurl}`+'universitylogin/'+`${emailId}`);\r\n  }\r\n\r\n  getUniversityById(instituteCode: number): Observable<University>{\r\n    return this.httpClient.get<University>(`${this.baseurl}`+'universityprofile/'+`${instituteCode}`);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}