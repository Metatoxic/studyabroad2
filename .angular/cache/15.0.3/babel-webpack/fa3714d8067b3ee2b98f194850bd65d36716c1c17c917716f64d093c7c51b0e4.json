{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/studentservice.service\";\nimport * as i2 from \"@angular/router\";\nexport class StudentauthGuard {\n  constructor(Studentservice, router) {\n    this.Studentservice = Studentservice;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.Studentservice.isloggedIn()) {\n      return true;\n    } else {\n      this.router.navigate(['/student']);\n      return false;\n    }\n  }\n}\nStudentauthGuard.ɵfac = function StudentauthGuard_Factory(t) {\n  return new (t || StudentauthGuard)(i0.ɵɵinject(i1.StudentserviceService), i0.ɵɵinject(i2.Router));\n};\nStudentauthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StudentauthGuard,\n  factory: StudentauthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AASA,OAAM,MAAOA,gBAAgB;EAE3BC,YAAoBC,cAAoC,EAASC,MAAa;IAA1D,mBAAc,GAAdD,cAAc;IAA+B,WAAM,GAANC,MAAM;EAAS;EAEhFC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IACxB,IAAG,IAAI,CAACJ,cAAc,CAACK,UAAU,EAAE,EAAC;MAClC,OAAO,IAAI;KACZ,MACG;MACF,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;MAClC,OAAO,KAAK;;EAElB;;AAdWR,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAS,SAAhBT,gBAAgB;EAAAU,YAFf;AAAM","names":["StudentauthGuard","constructor","Studentservice","router","canActivate","route","state","isloggedIn","navigate","factory","providedIn"],"sourceRoot":"","sources":["D:\\MadeshV-1626\\Angular workspace\\studyabroad\\src\\app\\gaurd\\studentauth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { StudentserviceService } from '../service/studentservice.service';\nimport { UniversityserviceService } from '../service/universityservice.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentauthGuard implements CanActivate {\n\n  constructor(private Studentservice:StudentserviceService,private router:Router){}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      if(this.Studentservice.isloggedIn()){\n        return true;\n      }\n      else{\n        this.router.navigate(['/student']);\n        return false;\n      }\n  }\n  \n\n  \n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}